version: 0.2
phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws --version
      # - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
      - printenv
      - echo -n "$CODEBUILD_LOG_PATH" > /tmp/build_id.out
      - printf "%s:%s" "$REPOSITORY_URI" "$(cat /tmp/build_id.out)" > /tmp/build_tag.out
      - printf '{"tag":"%s"}' "$(cat /tmp/build_id.out)" > /tmp/build.json

  install:
    commands:
      - |
        export DEBIAN_FRONTEND=noninteractive

        #Update
        apt-get update

        # Install SQLITE3
        apt-get install -y sqlite3

        #Install composer
        php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
        php composer-setup.php ;
        php -r "unlink('composer-setup.php');" ;
        mv composer.phar /usr/local/bin/composer

        #Various handy node based dev tools - do you need these during your build? Comment if not.
        #npm install -g gulp
        #npm install -g grunt
        #npm install -g webpack

  build:
    commands:
      - echo Build started on `date`
      - echo Installing composer deps
      - composer install
      - touch database/database.sqlite
      - php artisan migrate --database=sqlite --force

  post_build:
    commands:
      - echo Build completed on `date`
      # Do you need to do this? In many cases phpunit will use sqlite or similar to avoid the need for a real DB.
      # If you don't need it delete it
      # - /usr/bin/mysql  -u root -e "GRANT ALL ON *.* TO 'test'@'localhost' IDENTIFIED BY '' WITH GRANT OPTION"
      # - mysqladmin -u test create test
      - ./vendor/bin/phpunit

artifacts:
  files: /tmp/build.json
  discard-paths: yes
